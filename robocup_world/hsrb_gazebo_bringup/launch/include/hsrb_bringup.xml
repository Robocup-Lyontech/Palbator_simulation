<?xml version="1.0"?>
<!--
Copyright (c) 2014, Toyota Motor Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
 * Neither the name of Toyota Motor Corporation nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-->
<launch>
  <arg name="namespace" default="hsrb" />
  <arg name="personal_name" default="" />
  <arg name="use_laser_odom" default="true" />

  <!-- ns attribute is not accept empty string -->
  <group ns="/$(arg personal_name)">
    <rosparam file="$(find hsrb_common_config)/params/hsrb_sensor_config.yaml" command="load" ns="$(arg namespace)"/>
    <remap from="joint_states" to="$(arg namespace)/robot_state/joint_states" />

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
          respawn="false" output="screen">
      <param name="tf_prefix" value='$(arg personal_name)' />
    </node>
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"
          respawn="false" output="screen" >
      <rosparam param="source_list" subst_value="true">["$(arg namespace)/joint_states"]</rosparam>
    </node>
  </group>

  <group ns="$(arg personal_name)/$(arg namespace)" if="$(arg use_laser_odom)">
    <!-- laser_scan_matcher -->
    <rosparam file="$(find hsrb_gazebo_bringup)/params/hsrb_sensor_config.yaml" command="load" />
    <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher_node">
      <remap from="scan" to="base_scan"/>
      <remap from="pose_stamped" to="base_pose"/>
      <param name="base_frame" value="$(arg personal_name)/base_footprint" />
    </node>

    <!-- pose_to_odom -->
    <!-- double slash is invalid on topic_tools transform -->
    <arg if="$(eval personal_name == '')" name="transformer_prefix" value="$(arg namespace)" />
    <arg if="$(eval personal_name != '')" name="transformer_prefix" value="$(arg personal_name)/$(arg namespace)" />
    <node name="pose_stamped_to_odometry" pkg="topic_tools" type="transform"
          args="/$(arg transformer_prefix)/base_pose laser_odom nav_msgs/Odometry
        'nav_msgs.msg.Odometry(header=m.header, pose=geometry_msgs.msg.PoseWithCovariance(pose=m.pose))'
        --import nav_msgs geometry_msgs --wait-for-start" />
  </group>

  <group ns="/$(arg personal_name)">
    <node name="head_l_stereo_camera_frame_pub" pkg="tf" type="static_transform_publisher"
          args="0 0 0 0 0 0 $(arg personal_name)/head_l_stereo_camera_link $(arg personal_name)/head_l_stereo_camera_frame 100" />
    <node name="head_r_stereo_camera_frame_pub" pkg="tf" type="static_transform_publisher"
          args="0 0 0 0 0 0 $(arg personal_name)/head_r_stereo_camera_link $(arg personal_name)/head_r_stereo_camera_frame 100" />
    <node name="head_rgbd_sensor_rgb_frame_pub" pkg="tf" type="static_transform_publisher"
          args="0 0 0 0 0 0 $(arg personal_name)/head_rgbd_sensor_link $(arg personal_name)/head_rgbd_sensor_rgb_frame 100" />
    <node name="head_rgbd_sensor_depth_frame_pub" pkg="tf" type="static_transform_publisher"
          args="0 0 0 0 0 0 $(arg personal_name)/head_rgbd_sensor_link $(arg personal_name)/head_rgbd_sensor_depth_frame 100" />
  </group>

  <include file="$(find hsrb_gazebo_bringup)/launch/include/hsrb_relay_topics.xml">
    <arg name="namespace" value="$(arg namespace)" />
    <arg name="personal_name" value="$(arg personal_name)" />
  </include>

  <!-- odometry_switcher -->
  <group ns="$(arg personal_name)/$(arg namespace)">
    <arg name="odometry_config" default="$(find hsrb_common_config)/params/hsrb_odometry_config.yaml" />
    <!--node name="odometry_switcher" pkg="tmc_odometry_switcher" type="odometry_switcher_node">
      <remap from="switched_odom" to="odom"/>
      <rosparam command="load" file="$(arg odometry_config)"/>
      <param name="odom_frame" value="$(arg personal_name)/odom"/>
      <param name="odom_child_frame" value="$(arg personal_name)/base_footprint"/>
      <param name="initial_odom" value="laser_odom" if="$(arg use_laser_odom)"/>
      <param name="initial_odom" value="wheel_odom" unless="$(arg use_laser_odom)"/>
    </node-->
  </group>
</launch>
